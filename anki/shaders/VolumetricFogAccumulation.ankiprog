// Copyright (C) 2009-2020, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

ANKI_SPECIALIZATION_CONSTANT_UVEC3(VOLUME_SIZE, 0, UVec3(1));
ANKI_SPECIALIZATION_CONSTANT_U32(FINAL_CLUSTER_Z, 9, 1);

#pragma anki start comp

#include <anki/shaders/include/ClusteredShadingTypes.h>
#include <anki/shaders/include/ClusteredShadingFunctions.h>
#include <anki/shaders/Common.glsl>

const UVec2 WORKGROUP_SIZE = UVec2(8, 8);
layout(local_size_x = WORKGROUP_SIZE.x, local_size_y = WORKGROUP_SIZE.y, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler u_linearAnyClampSampler;
layout(set = 0, binding = 1) uniform texture3D u_lightVolume;
layout(set = 0, binding = 2) writeonly uniform image3D u_fogVolume;

layout(push_constant, std430) uniform pc_
{
	F32 u_fogScatteringCoeff;
	F32 u_fogAbsorptionCoeff;
	F32 u_density;
	F32 u_padding0;
	Vec3 u_fogDiffuse;
	U32 u_padding1;
	ClustererMagicValues u_clustererMagic;
};

void main()
{
	if(any(greaterThanEqual(gl_GlobalInvocationID.xy, VOLUME_SIZE.xy)))
	{
		return;
	}

	const Vec2 uv = (Vec2(gl_GlobalInvocationID.xy) + 0.5) / Vec2(VOLUME_SIZE.xy);

	Vec4 colorAndDensityFront = Vec4(0.0);
	ANKI_LOOP for(U32 i = 0u; i < VOLUME_SIZE.z; ++i)
	{
		// Compute the cluster K limits of this cluster fragment
		const F32 clusterKNear = F32(i) * (F32(FINAL_CLUSTER_Z + 1u) / F32(VOLUME_SIZE.z));
		const F32 clusterKFar = F32(i + 1u) * (F32(FINAL_CLUSTER_Z + 1u) / F32(VOLUME_SIZE.z));

		// Compute the min and max Z in view space if this cluster fragment
		const F32 zVSpaceNear = -computeClusterNearf(u_clustererMagic, clusterKNear);
		const F32 zVSpaceFar = -computeClusterNearf(u_clustererMagic, clusterKFar);

		// Compute the thikness of this fragment
		const F32 layerThinkness = abs(zVSpaceNear - zVSpaceFar);

		// Read the light value and the fog density from the fog volumes
		Vec4 lightAndFogDensity =
			textureLod(u_lightVolume, u_linearAnyClampSampler, Vec3(uv, clusterKFar / F32(FINAL_CLUSTER_Z + 1u)), 0.0);
		lightAndFogDensity.xyz *= u_fogDiffuse / PI;
		lightAndFogDensity.w += u_density; // Apply the default density

		// Scattering & absorption
		const F32 scattering = lightAndFogDensity.w * u_fogScatteringCoeff * layerThinkness;
		const F32 absorption = lightAndFogDensity.w * u_fogAbsorptionCoeff * layerThinkness;

		// Integrate
		const Vec4 colorAndDensityBack = Vec4(lightAndFogDensity.xyz * scattering, scattering + absorption);

		const Vec3 l = colorAndDensityFront.rgb + saturate(exp(-colorAndDensityFront.a)) * colorAndDensityBack.rgb;
		colorAndDensityFront = Vec4(l.rgb, colorAndDensityFront.a + colorAndDensityBack.a);

		// Write the value
		const Vec4 valToWrite = Vec4(colorAndDensityFront.rgb, saturate(exp(-colorAndDensityFront.a)));
		imageStore(u_fogVolume, IVec3(UVec3(gl_GlobalInvocationID.xy, i)), valToWrite);
	}
}

#pragma anki end
